/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
            require-prior-idle-ms = <120>;
        };

        stab {
            bindings = <&kp LS(TAB)>;
            key-positions = <13 15>;
            require-prior-idle-ms = <120>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <33 34 31 32>;
            require-prior-idle-ms = <120>;
        };

        bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <44 43>;
            require-prior-idle-ms = <120>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <44 45>;
            require-prior-idle-ms = <120>;
        };

        stab2 {
            bindings = <&kp LS(TAB)>;
            key-positions = <14 15>;
            require-prior-idle-ms = <120>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <38 39>;
            require-prior-idle-ms = <120>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <39 40>;
            require-prior-idle-ms = <120>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <37 38>;
            require-prior-idle-ms = <120>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <37 38 39>;
            require-prior-idle-ms = <120>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <37 39 38 41>;
            require-prior-idle-ms = <120>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <26 28>;
            require-prior-idle-ms = <120>;
        };

        up {
            bindings = <&kp UP>;
            key-positions = <19 21>;
            require-prior-idle-ms = <120>;
        };

        down {
            bindings = <&kp DOWN>;
            key-positions = <31 33>;
            require-prior-idle-ms = <120>;
        };

        pg_up {
            bindings = <&kp PAGE_UP>;
            key-positions = <19 20 21>;
            require-prior-idle-ms = <120>;
        };

        pg_dn {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <31 32 33>;
            require-prior-idle-ms = <120>;
        };

        aleft {
            bindings = <&kp LA(LEFT)>;
            key-positions = <31 32>;
            require-prior-idle-ms = <120>;
        };

        aright {
            bindings = <&kp LA(RIGHT)>;
            key-positions = <32 33>;
            require-prior-idle-ms = <120>;
        };

        left {
            bindings = <&kp LEFT>;
            key-positions = <32 30>;
            require-prior-idle-ms = <120>;
        };

        right {
            bindings = <&kp RIGHT>;
            key-positions = <30 33>;
            require-prior-idle-ms = <120>;
        };

        ca {
            bindings = <&kp LC(A)>;
            key-positions = <30 32 33>;
            require-prior-idle-ms = <120>;
        };

        ce {
            bindings = <&kp LC(E)>;
            key-positions = <32 33 34>;
            require-prior-idle-ms = <120>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <18 20 21>;
            require-prior-idle-ms = <120>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <20 21 22>;
            require-prior-idle-ms = <120>;
        };

        back {
            bindings = <&kp LG(LEFT_BRACKET)>;
            key-positions = <20 19>;
            require-prior-idle-ms = <120>;
        };

        fwd {
            bindings = <&kp LG(RIGHT_BRACKET)>;
            key-positions = <20 21>;
            require-prior-idle-ms = <120>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC   |  1  |  2  |  3   |  4   |  5   |                    |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB   |  Q  |  W  |  E   |  R   |  T   |                    |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL  |  A  |  S  |  D   |  F   |  G   |                    |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT  |  Z  |  X  |  C   |  V   |  B   |                    |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            // |    2   |  2  | f   | 6    | 4    | 1    |                    | 2    | 1     | w     | s    | n     |  a    |

            bindings = <
&kp EQUAL                  &kp N1                          &kp N2           &kp N3                   &kp N4               &kp N5                              &kp N6       &kp N7              &kp N8                &kp N9            &kp N0                        &kp MINUS
&kp TAB                    &kp Q                           &kp W            &kp E                    &kp R                &kp T                               &kp Y        &kp U               &kp I                 &kp O             &kp P                         &kp BSLH
&mt LCTRL GRAVE            &hml LEFT_CONTROL A             &hml LEFT_ALT S  &hml LCMD D              &hml LEFT_SHIFT F    &kp G                               &kp H        &hmr RIGHT_SHIFT J  &hmr RIGHT_COMMAND K  &hmr RIGHT_ALT L  &hmr RIGHT_CONTROL SEMICOLON  &mt RIGHT_CONTROL SINGLE_QUOTE
&mt LEFT_SHIFT BACKSLASH   &kp Z                           &kp X            &kp C                    &kp V                &kp B                               &kp N        &kp M               &kp COMMA             &kp DOT           &kp FSLH                      &mt RIGHT_SHIFT SLASH
&gresc                     &kp GLOBE                       &kp LEFT         &kp RIGHT                                               &kp UP                    &kp DOWN     &kp LBKT            &kp RBKT
&mt LEFT_ALT LEFT_BRACKET  &mt LEFT_COMMAND RIGHT_BRACKET                   &mt RIGHT_COMMAND MINUS  &mt RIGHT_ALT EQUAL
                                                                            &lt 4 SPACE              &lt 1 BACKSPACE      &kp HOME  &kp PAGE_UP  &lt 2 ENTER  &lt 4 SPACE
                           &lt 3 END                       &lt 3 PAGE_DOWN
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        num {
            bindings = <
&kp F1  &kp F2           &kp F3     &kp F4      &kp F5       &kp F6                         &kp F7     &kp F8  &kp F9  &kp F10  &kp F11    &kp F12
&trans  &kp EXCLAMATION  &kp HASH   &kp DOLLAR  &kp PERCENT  &kp CARET                      &kp PLUS   &kp N7  &kp N8  &kp N9   &kp STAR   &trans
&trans  &kp LCTRL        &kp LALT   &kp LGUI    &kp LSHFT    &kp GLOBE                      &kp N0     &kp N4  &kp N5  &kp N6   &kp EQUAL  &trans
&trans  &kp LG(Z)        &kp LG(X)  &kp LG(C)   &kp LG(V)    &kp LG(LS(Z))                  &kp MINUS  &kp N1  &kp N2  &kp N3   &kp FSLH   &trans
&trans  &trans           &trans     &trans                                  &trans          &trans     &trans  &trans
&trans  &trans                      &trans      &trans
                                    &trans      &trans       &trans         &trans  &trans  &trans
        &trans           &trans
            >;
        };

        sym {
            bindings = <
&kp F1  &kp F2         &kp F3         &kp F4                &kp F5                 &kp F6                            &kp F7     &kp F8           &kp F9         &kp F10        &kp F11            &kp F12
&trans  &kp GRAVE      &kp UNDER      &kp LBKT              &kp RBKT               &kp PIPE                          &trans     &trans           &trans         &trans         &trans             &trans
&trans  &kp PERCENT    &kp BACKSLASH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SLASH                         &kp GLOBE  &kp RIGHT_SHIFT  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &trans
&trans  &kp AMPERSAND  &kp LESS_THAN  &kp LEFT_BRACE        &kp RBRC               &kp GREATER_THAN                  &trans     &trans           &trans         &trans         &trans             &trans
&trans  &trans         &trans         &trans                                                         &trans          &trans     &trans           &trans
&trans  &trans                        &trans                &trans
                                      &trans                &trans                 &trans            &trans  &trans  &trans
        &trans         &trans
            >;
        };

        util {
            bindings = <
&trans  &trans        &trans        &trans        &trans      &trans                         &trans              &trans              &trans         &trans         &trans         &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &trans                         &kp LG(LEFT_ARROW)  &kp LA(LEFT_ARROW)  &kp UP         &kp LA(RIGHT)  &kp LG(RIGHT)  &trans
&trans  &kp LCTRL     &kp LALT      &kp LGUI      &kp LSHFT   &trans                         &kp LC(A)           &kp LEFT            &kp DOWN       &kp RIGHT      &kp LC(E)      &trans
&trans  &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)   &kp LS(LG(Z))                  &kp HOME            &kp PAGE_UP         &kp PAGE_DOWN  &kp END        &kp ESC        &trans
&trans  &trans        &trans        &trans                                   &trans          &trans              &trans              &trans
&trans  &trans                      &trans        &trans
                                    &bootloader   &trans      &trans         &trans  &trans  &bootloader
        &trans        &trans
            >;
        };

        flykey {
            bindings = <
&trans  &trans        &trans        &trans        &trans       &trans                          &trans        &trans        &trans     &trans         &trans         &trans
&trans  &kp LA(UP)    &kp LG(BSPC)  &kp LA(BSPC)  &kp LA(DEL)  &kp LG(DELETE)                  &kp LG(LEFT)  &kp LA(LEFT)  &kp UP     &kp LA(RIGHT)  &kp LG(RIGHT)  &trans
&trans  &kp LA(DOWN)  &kp LC(U)     &kp BSPC      &kp DEL      &kp LC(K)                       &kp LC(A)     &kp LEFT      &kp DOWN   &kp RIGHT      &kp LC(E)      &trans
&trans  &kp ESC       &kp LG(UP)    &kp LG(DOWN)  &kp RET      &kp TAB                         &kp HOME      &kp PG_UP     &kp PG_DN  &kp END        &trans         &trans
&trans  &trans        &trans        &trans                                     &trans          &trans        &trans        &trans
&trans  &trans                      &trans        &trans
                                    &trans        &trans       &trans          &trans  &trans  &trans
        &trans        &trans
            >;
        };
    };
};
